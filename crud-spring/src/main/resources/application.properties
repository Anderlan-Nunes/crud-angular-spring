spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=true

#http://localhost:8080/h2-console

server.error.include-stacktrace=never
server.error.include-message=never
# Essas são configurações comuns em aplicações Spring Boot que utilizam o banco de dados H2 em memória. Vamos detalhar cada uma delas:

# spring.datasource.url=jdbc:h2:mem:testdb

# * **`spring.datasource.url`**: Esta propriedade define a URL de conexão com o banco de dados.
#     * **`jdbc:h2:`**: Indica que estamos utilizando o driver JDBC do H2 Database Engine.
#     * **`mem:`**: Especifica que o banco de dados será criado e mantido na memória (RAM). Isso significa que os dados existirão enquanto a aplicação estiver rodando e serão perdidos quando a aplicação for finalizada.
#     * **`testdb`**: É o nome do banco de dados em memória que será criado. Você pode escolher outro nome se preferir.


# spring.datasource.driverClassName=org.h2.Driver


# * **`spring.datasource.driverClassName`**: Esta propriedade informa ao Spring qual classe de driver JDBC deve ser utilizada para se conectar ao banco de dados especificado na `spring.datasource.url`.
#     * **`org.h2.Driver`**: É a classe do driver JDBC fornecida pelo H2 Database Engine. O Spring utiliza essa informação para carregar o driver correto e estabelecer a comunicação com o banco de dados H2.

# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# * **`spring.jpa.database-platform`**: Esta propriedade informa ao Hibernate (a implementação JPA padrão do Spring Boot) qual dialeto de banco de dados deve ser utilizado. O dialeto é específico para cada banco de dados e ajuda o Hibernate a gerar SQL otimizado para aquele banco.
#     * **`org.hibernate.dialect.H2Dialect`**: Especifica que o Hibernate deve utilizar o dialeto do H2 Database Engine. Isso garante que os comandos SQL gerados pelo Hibernate sejam compatíveis com a sintaxe e as funcionalidades do H2.

# spring.jpa.show-sql=true

# * **`spring.jpa.show-sql`**: Esta propriedade instrui o Hibernate a exibir no console (ou nos logs) as consultas SQL que ele está executando contra o banco de dados.
#     * **`true`**: Ativa a exibição das consultas SQL. Isso é muito útil durante o desenvolvimento e teste para verificar quais consultas estão sendo geradas e como estão sendo executadas. Em ambientes de produção, geralmente é desativado (`false`) para evitar a sobrecarga de log e possíveis exposições de informações sensíveis.

# **Em resumo:**

# Essas configurações dizem ao Spring Boot para:

# * Conectar-se a um banco de dados H2 que reside inteiramente na memória (`spring.datasource.url`).
# * Utilizar o driver JDBC específico do H2 para realizar essa conexão (`spring.datasource.driverClassName`).
# * Autenticar-se no banco de dados com o nome de usuário `sa` e a senha `password` (`spring.datasource.username` e `spring.datasource.password`).
# * Configurar o Hibernate para gerar SQL compatível com o H2 (`spring.jpa.database-platform`).
# * Mostrar no console as consultas SQL que o Hibernate está executando (`spring.jpa.show-sql`).

# É importante notar que um banco de dados em memória como o configurado aqui é geralmente utilizado para desenvolvimento, testes unitários e de integração, ou em cenários onde a persistência dos dados entre as execuções da aplicação não é necessária. Para aplicações em produção que precisam armazenar dados de forma persistente, você utilizaria um banco de dados mais robusto como PostgreSQL, MySQL, etc., e as configurações de `spring.datasource.url`, `spring.datasource.driverClassName` e `spring.jpa.database-platform` seriam ajustadas de acordo.